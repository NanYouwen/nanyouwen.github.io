<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker安装教程-Linux</title>
    <link href="/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/"/>
    <url>/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/</url>
    
    <content type="html"><![CDATA[<p>确保自己的yum是最新：sudo yum update</p><p><strong>1.卸载旧版本</strong>：如果你从未安装过则不用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-engine<br></code></pre></td></tr></table></figure><p><strong>2.配置Docker的yum库</strong></p><p>首先安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>安装成功后执行命令配置Docker的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>3.安装Docker</strong></p><p>执行命令安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p><strong>4.启动和校验docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-comment"># 停止</span><br><span class="hljs-built_in">sudo</span> systemctl stop docker<br><span class="hljs-comment">#重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment">#执行docker ps命令，不报错则说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><p><strong>5.配置镜像加速器</strong>：以阿里云为例</p><ol><li>访问官网<a href="https://www.aliyun.com/">https://www.aliyun.com/</a>  注册账户</li><li>找到容器镜像服务<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195441887.png" alt="image-20240801195441887"></li><li>点击管理控制台<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195614707.png" alt="image-20240801195614707"></li><li>选择镜像工具找到镜像加速器<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195746401.png" alt="image-20240801195746401"></li><li>参考文档命令配置<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195946566.png" alt="image-20240801195946566"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装教程-Linux</title>
    <link href="/%E5%85%B6%E4%BB%9601/"/>
    <url>/%E5%85%B6%E4%BB%9601/</url>
    
    <content type="html"><![CDATA[<p>确保自己的yum是最新：sudo yum update</p><p><strong>1.卸载旧版本</strong>：如果你从未安装过则不用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-engine<br></code></pre></td></tr></table></figure><p><strong>2.配置Docker的yum库</strong></p><p>首先安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>安装成功后执行命令配置Docker的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>3.安装Docker</strong></p><p>执行命令安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p><strong>4.启动和校验docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-comment"># 停止</span><br><span class="hljs-built_in">sudo</span> systemctl stop docker<br><span class="hljs-comment">#重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment">#执行docker ps命令，不报错则说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><p><strong>5.配置镜像加速器</strong>：以阿里云为例</p><ol><li>访问官网<a href="https://www.aliyun.com/">https://www.aliyun.com/</a>  注册账户</li><li>找到容器镜像服务<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195441887.png" alt="image-20240801195441887"></li><li>点击管理控制台<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195614707.png" alt="image-20240801195614707"></li><li>选择镜像工具找到镜像加速器<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195746401.png" alt="image-20240801195746401"></li><li>参考文档命令配置<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195946566.png" alt="image-20240801195946566"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装教程-Linux</title>
    <link href="/%E5%85%B6%E4%BB%9603/"/>
    <url>/%E5%85%B6%E4%BB%9603/</url>
    
    <content type="html"><![CDATA[<p>确保自己的yum是最新：sudo yum update</p><p><strong>1.卸载旧版本</strong>：如果你从未安装过则不用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-engine<br></code></pre></td></tr></table></figure><p><strong>2.配置Docker的yum库</strong></p><p>首先安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>安装成功后执行命令配置Docker的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>3.安装Docker</strong></p><p>执行命令安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p><strong>4.启动和校验docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-comment"># 停止</span><br><span class="hljs-built_in">sudo</span> systemctl stop docker<br><span class="hljs-comment">#重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment">#执行docker ps命令，不报错则说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><p><strong>5.配置镜像加速器</strong>：以阿里云为例</p><ol><li>访问官网<a href="https://www.aliyun.com/">https://www.aliyun.com/</a>  注册账户</li><li>找到容器镜像服务<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195441887.png" alt="image-20240801195441887"></li><li>点击管理控制台<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195614707.png" alt="image-20240801195614707"></li><li>选择镜像工具找到镜像加速器<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195746401.png" alt="image-20240801195746401"></li><li>参考文档命令配置<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195946566.png" alt="image-20240801195946566"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装教程-Linux</title>
    <link href="/%E5%85%B6%E4%BB%9602/"/>
    <url>/%E5%85%B6%E4%BB%9602/</url>
    
    <content type="html"><![CDATA[<p>确保自己的yum是最新：sudo yum update</p><p><strong>1.卸载旧版本</strong>：如果你从未安装过则不用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-engine<br></code></pre></td></tr></table></figure><p><strong>2.配置Docker的yum库</strong></p><p>首先安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>安装成功后执行命令配置Docker的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>3.安装Docker</strong></p><p>执行命令安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p><strong>4.启动和校验docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-comment"># 停止</span><br><span class="hljs-built_in">sudo</span> systemctl stop docker<br><span class="hljs-comment">#重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment">#执行docker ps命令，不报错则说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><p><strong>5.配置镜像加速器</strong>：以阿里云为例</p><ol><li>访问官网<a href="https://www.aliyun.com/">https://www.aliyun.com/</a>  注册账户</li><li>找到容器镜像服务<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195441887.png" alt="image-20240801195441887"></li><li>点击管理控制台<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195614707.png" alt="image-20240801195614707"></li><li>选择镜像工具找到镜像加速器<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195746401.png" alt="image-20240801195746401"></li><li>参考文档命令配置<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195946566.png" alt="image-20240801195946566"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装教程-Linux</title>
    <link href="/%E5%85%B6%E4%BB%9605/"/>
    <url>/%E5%85%B6%E4%BB%9605/</url>
    
    <content type="html"><![CDATA[<p>确保自己的yum是最新：sudo yum update</p><p><strong>1.卸载旧版本</strong>：如果你从未安装过则不用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-engine<br></code></pre></td></tr></table></figure><p><strong>2.配置Docker的yum库</strong></p><p>首先安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>安装成功后执行命令配置Docker的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>3.安装Docker</strong></p><p>执行命令安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p><strong>4.启动和校验docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-comment"># 停止</span><br><span class="hljs-built_in">sudo</span> systemctl stop docker<br><span class="hljs-comment">#重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment">#执行docker ps命令，不报错则说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><p><strong>5.配置镜像加速器</strong>：以阿里云为例</p><ol><li>访问官网<a href="https://www.aliyun.com/">https://www.aliyun.com/</a>  注册账户</li><li>找到容器镜像服务<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195441887.png" alt="image-20240801195441887"></li><li>点击管理控制台<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195614707.png" alt="image-20240801195614707"></li><li>选择镜像工具找到镜像加速器<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195746401.png" alt="image-20240801195746401"></li><li>参考文档命令配置<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195946566.png" alt="image-20240801195946566"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装教程-Linux</title>
    <link href="/%E5%85%B6%E4%BB%9604/"/>
    <url>/%E5%85%B6%E4%BB%9604/</url>
    
    <content type="html"><![CDATA[<p>确保自己的yum是最新：sudo yum update</p><p><strong>1.卸载旧版本</strong>：如果你从未安装过则不用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-engine<br></code></pre></td></tr></table></figure><p><strong>2.配置Docker的yum库</strong></p><p>首先安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>安装成功后执行命令配置Docker的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><strong>3.安装Docker</strong></p><p>执行命令安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p><strong>4.启动和校验docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-comment"># 停止</span><br><span class="hljs-built_in">sudo</span> systemctl stop docker<br><span class="hljs-comment">#重启</span><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment">#设置开机自启动</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment">#执行docker ps命令，不报错则说明安装启动成功</span><br>docker ps<br></code></pre></td></tr></table></figure><p><strong>5.配置镜像加速器</strong>：以阿里云为例</p><ol><li>访问官网<a href="https://www.aliyun.com/">https://www.aliyun.com/</a>  注册账户</li><li>找到容器镜像服务<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195441887.png" alt="image-20240801195441887"></li><li>点击管理控制台<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195614707.png" alt="image-20240801195614707"></li><li>选择镜像工具找到镜像加速器<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195746401.png" alt="image-20240801195746401"></li><li>参考文档命令配置<img src="/../img/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-Linux/image-20240801195946566.png" alt="image-20240801195946566"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GC垃圾回收</title>
    <link href="/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="GC垃圾回收"><a href="#GC垃圾回收" class="headerlink" title="GC垃圾回收"></a>GC垃圾回收</h1><p><strong>想要实现垃圾自动回收，我们需要考虑三件事：</strong></p><p><img src="/../img/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20240801123908708.png" alt="image-20240801123908708"></p><p><strong>GC的作用区域：方法区和堆</strong></p><p>JVM在进行GC时并不是对以下三个区统一回收，大部分时候都是回收新生区：</p><ul><li>新生区</li><li>幸存区</li><li>老年区</li></ul><p><strong>GC两种种类：轻GC（普通GC，一般是清理新生区，偶尔清理幸存区）和重GC（全局GC）</strong></p><p><strong>引用计数法（JVM一般不采用这种方式）</strong></p><p><img src="/../img/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20240801124535478.png" alt="image-20240801124535478"></p><p><strong>复制算法</strong></p><ul><li>每次GC都会将Eden中活的对象移到幸存区中，一旦Eden区被GC后，就会是空的</li><li>幸存区中的from和to区中，谁是空的谁为to区</li><li>当一个对象经历15次GC没死，可以进入老年区</li></ul><p><strong>复制算法的好处是没有内存的碎片，坏处是浪费了内存空间：多了一半空间永远是空的</strong><br><strong>复制算法最佳使用场景：对象存活度较低；也就是新生区</strong></p><p><strong>标记清除算法</strong></p><p><img src="/../img/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20240801130446501.png" alt="image-20240801130446501"></p><ul><li>优点：不需要额外的空间</li><li>缺点：两次扫描，严重浪费时间，会产生内存碎片</li></ul><p><strong>标记整理（标记压缩）</strong></p><p>上述再优化：先标记清除几次，再进行压缩</p><p><img src="/../img/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/image-20240801130941518.png" alt="image-20240801130941518"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</li><li>内存整齐度：复制算法&#x3D;标记压缩算法&gt;标记清除算法</li><li>内存利用率：标记压缩算法&#x3D;标记清除算法&gt;复制算法</li></ul><p><strong>没有最好的算法，只有最合适的算法—&gt;GC：分代收集算法</strong></p><p>年轻代：</p><ul><li>存活率低</li><li>复制算法</li></ul><p>老年代：</p><ul><li>存活率高，区域大</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul><p><strong>JVM调优就是选择合适的内存设置以及垃圾收集器GC的选择</strong></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM基本概念</title>
    <link href="/JVM%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/JVM%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><p>内存设置</p><ul><li>堆内存大小：通过‘-Xms’和‘-Xmx’设置最小和最大堆内存大小。通常这两者设为相同大小</li><li>新生代和老年代大小：使用‘-xx:NewRatio’设置新生代和老年代比例。新生代应该足够大，以容纳所有短期对象，减少对象提升到老年代的频率</li></ul></li><li><p>垃圾收集器GC选择：不同垃圾选择器适用不同场景。如G1适合有较大堆内存且需要较短GC暂停时间的应用，Parallel GC适合需要高吞吐量的应用，CMS适合需要低延迟的应用</p></li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM基本概念</title>
    <link href="/java01/"/>
    <url>/java01/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><p>内存设置</p><ul><li>堆内存大小：通过‘-Xms’和‘-Xmx’设置最小和最大堆内存大小。通常这两者设为相同大小</li><li>新生代和老年代大小：使用‘-xx:NewRatio’设置新生代和老年代比例。新生代应该足够大，以容纳所有短期对象，减少对象提升到老年代的频率</li></ul></li><li><p>垃圾收集器GC选择：不同垃圾选择器适用不同场景。如G1适合有较大堆内存且需要较短GC暂停时间的应用，Parallel GC适合需要高吞吐量的应用，CMS适合需要低延迟的应用</p></li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM基本概念</title>
    <link href="/java02/"/>
    <url>/java02/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><p>内存设置</p><ul><li>堆内存大小：通过‘-Xms’和‘-Xmx’设置最小和最大堆内存大小。通常这两者设为相同大小</li><li>新生代和老年代大小：使用‘-xx:NewRatio’设置新生代和老年代比例。新生代应该足够大，以容纳所有短期对象，减少对象提升到老年代的频率</li></ul></li><li><p>垃圾收集器GC选择：不同垃圾选择器适用不同场景。如G1适合有较大堆内存且需要较短GC暂停时间的应用，Parallel GC适合需要高吞吐量的应用，CMS适合需要低延迟的应用</p></li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM基本概念</title>
    <link href="/java04/"/>
    <url>/java04/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><p>内存设置</p><ul><li>堆内存大小：通过‘-Xms’和‘-Xmx’设置最小和最大堆内存大小。通常这两者设为相同大小</li><li>新生代和老年代大小：使用‘-xx:NewRatio’设置新生代和老年代比例。新生代应该足够大，以容纳所有短期对象，减少对象提升到老年代的频率</li></ul></li><li><p>垃圾收集器GC选择：不同垃圾选择器适用不同场景。如G1适合有较大堆内存且需要较短GC暂停时间的应用，Parallel GC适合需要高吞吐量的应用，CMS适合需要低延迟的应用</p></li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM基本概念</title>
    <link href="/java03/"/>
    <url>/java03/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><p>内存设置</p><ul><li>堆内存大小：通过‘-Xms’和‘-Xmx’设置最小和最大堆内存大小。通常这两者设为相同大小</li><li>新生代和老年代大小：使用‘-xx:NewRatio’设置新生代和老年代比例。新生代应该足够大，以容纳所有短期对象，减少对象提升到老年代的频率</li></ul></li><li><p>垃圾收集器GC选择：不同垃圾选择器适用不同场景。如G1适合有较大堆内存且需要较短GC暂停时间的应用，Parallel GC适合需要高吞吐量的应用，CMS适合需要低延迟的应用</p></li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM基本概念</title>
    <link href="/java05/"/>
    <url>/java05/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><p>内存设置</p><ul><li>堆内存大小：通过‘-Xms’和‘-Xmx’设置最小和最大堆内存大小。通常这两者设为相同大小</li><li>新生代和老年代大小：使用‘-xx:NewRatio’设置新生代和老年代比例。新生代应该足够大，以容纳所有短期对象，减少对象提升到老年代的频率</li></ul></li><li><p>垃圾收集器GC选择：不同垃圾选择器适用不同场景。如G1适合有较大堆内存且需要较短GC暂停时间的应用，Parallel GC适合需要高吞吐量的应用，CMS适合需要低延迟的应用</p></li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java对象在内存中的实例化过程</title>
    <link href="/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <url>/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="java对象在内存中实例化的过程"><a href="#java对象在内存中实例化的过程" class="headerlink" title="java对象在内存中实例化的过程"></a>java对象在内存中实例化的过程</h1><p>​在Java类的实例化过程中，内存会使用到三个区域：<strong>栈区、堆区、方法区</strong></p><ul><li>堆区：存储的全部都是对象，每个对象包含了一个与之对应的class类的信息。jvm只有一个堆区（steap），它会被所有线程共享，堆中不存放基本数据类型和对象引用，他只存放对象本身</li><li>栈区：每个线程都包含一个栈区，栈中只保存基本数据类型的值和对象以及基础数据的引用。每个栈中的数据都是私有的，其他栈无法访问</li><li>方法区：又被称为静态区，跟堆一样被所有线程共享，方法区包含所有class信息和static修饰的变量。方法区中包含的都是整个程序中永远唯一的元素，如class，static变量等</li></ul><p><strong>类实例化时内存中发生的变化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    String name; <span class="hljs-comment">// 定义一个成员变量 name</span><br>    <span class="hljs-type">int</span> age; <span class="hljs-comment">// 成员变量 age</span><br>    Double height; <span class="hljs-comment">// 成员变量 height</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人的姓名：&quot;</span>+name);<br>        System.out.println(<span class="hljs-string">&quot;人的年龄：&quot;</span>+age);<br>        System.out.println(<span class="hljs-string">&quot;人的身高：&quot;</span>+height);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String name; <span class="hljs-comment">// 定义一个局部变量 name</span><br>    <span class="hljs-type">int</span> age; <span class="hljs-comment">// 局部变量 age</span><br>    Double height; <span class="hljs-comment">// 局部变量 height</span><br>        <br>        <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>() ; <span class="hljs-comment">//实例化对象people</span><br>        people.name = <span class="hljs-string">&quot;张三&quot;</span> ;       <span class="hljs-comment">//赋值</span><br>        people.age = <span class="hljs-number">18</span>;             <span class="hljs-comment">//赋值</span><br>        people.stuid = <span class="hljs-number">180.0</span> ;   <span class="hljs-comment">//赋值</span><br>        people.sing();              <span class="hljs-comment">//调用方法sing</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>代码解析</strong>：首先定义了三个成员变量，但是都只声明，没有初始化，然后定义了一个成员方法。在main方法中定义了三个局部变量，然后实例化对象people，内存中在堆区会给实例化对象people分配一片地址，然后我们堆people进行赋值，people调用成员方法，main打印输出，系统执行完毕。下面我用图解法展示实例化过程中内存的变化：</p><p><img src="/../img/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/image-20240801093850304.png" alt="image-20240801093850304"></p><p>首先类中的成员变量和方法体会进入到方法区，如图：</p><p><img src="/../img/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/image-20240801094224361.png" alt="image-20240801094224361"></p><p>程序执行main方法时，main()函数会方法体会进入栈区，这一过程叫压栈，定义了一个用于指向Person实例的变量person。如图：</p><p><img src="/../img/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/image-20240801094507538.png" alt="image-20240801094507538"></p><p>程序执行到Person person &#x3D; new Person()时就会在堆中开辟一块空间用来存放Person对象实例，然后将成员变量和成员方法放在new实例中，里面都是取成员变量或成员方法的地址值。如图：</p><p><img src="/../img/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/image-20240801095300609.png" alt="image-20240801095300609"></p><p>接下来堆person对象进行赋值。如图：</p><p><img src="/../img/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/image-20240801101009168.png" alt="image-20240801101009168"></p><p>当程序走到sing()方法时，先到栈区找到person这个引用变量，然后根据该地址值这种堆内存中找到new Person()进行方法调用。在方法体void sing()被调用完成后，就立马从栈内弹出。</p><p><img src="/../img/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/image-20240801101521000.png" alt="image-20240801101521000"></p><p>以上就是Java对象在内存中实例化的全过程。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DML</title>
    <link href="/Mysql%E4%B8%AD%E7%9A%84DML/"/>
    <url>/Mysql%E4%B8%AD%E7%9A%84DML/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql%E4%B8%AD%E7%9A%84DDL/"/>
    <url>/Mysql%E4%B8%AD%E7%9A%84DDL/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql03/"/>
    <url>/Mysql03/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql01/"/>
    <url>/Mysql01/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql02/"/>
    <url>/Mysql02/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql04/"/>
    <url>/Mysql04/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql05/"/>
    <url>/Mysql05/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
